package com.roscopeco.scratch.codegen;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.PrintWriter;

import com.roscopeco.scratch.io.ScratchProject;
import com.roscopeco.scratch.io.objects.OrderedCollection;
import com.roscopeco.scratch.io.objects.ScratchSpriteMorph;

public class ProjectCodeGenerator {
  private final ScratchProject project;
  private final String codeDir;
  private final String pkg;
  private final String resDir;
  
  public ProjectCodeGenerator(ScratchProject project, String outputDir, String outputPackage, String resDir) {
    this.project = project;
    this.codeDir = outputDir;
    this.pkg = outputPackage;
    this.resDir = resDir;
  }
  
  public void generate() throws IOException {
    StringBuilder objectsSb = new StringBuilder();
    StringBuilder createSb = new StringBuilder();
    
    generateCreateHeader(createSb);
    
    generateClassHeader(objectsSb);
    generateObjects(objectsSb, createSb);
    
    generateCreateFooter(createSb);
    objectsSb.append(createSb);
    generateClassFooter(objectsSb);
    
    FileOutputStream objectsClz = openObjectsFile();
    PrintWriter objectsPw = new PrintWriter(objectsClz);
    objectsPw.write(objectsSb.toString());
    objectsPw.close();
  }
  
  FileOutputStream openObjectsFile() throws IOException {
    String dirName;
    
    dirName = codeDir + File.separator + pkg.replaceAll("\\.", File.separator);
    File dir = new File(dirName);
    dir.mkdirs();
    
    String fn = "Objects.java";
    File f = new File(dir, fn);
    
    return new FileOutputStream(f);
  }
  
  void generateClassHeader(StringBuilder objectsSb) {
    objectsSb.append("/* Generated by ScratchToJava */\n");
    objectsSb.append("package ").append(pkg).append(";\n\n");
    
    objectsSb.append("import com.roscopeco.scratch.runtime.AbstractSprite;\n\n");
    objectsSb.append("import ").append(pkg).append(".sprites.*;\n\n");
    
    objectsSb.append("public final class Objects {\n");
  }
  
  void generateCreateHeader(StringBuilder createSb) {
    createSb.append("  public static void initialize() {\n");
    createSb.append("    createAllSprites();\n");
    createSb.append("    registerAllScripts();\n");
    createSb.append("  }\n\n");
    createSb.append("  private static void createAllSprites() {\n");
  }
  
  void generateObjects(StringBuilder objectsSb, StringBuilder createSb) throws IOException {
    String objClz = ObjectCodeGenerator.scratchNameToIdentifier(project.getStage().objName().toString(), true);
    String objVar = ObjectCodeGenerator.scratchNameToIdentifier(project.getStage().objName().toString(), false);    
    String stageVar = objVar;
    
    objectsSb.append("  public static ").append(objClz).append(" ").append(stageVar).append(";\n");    
    
    createSb.append("    ").append(stageVar).append(" = new ").append(objClz).append("();\n");
    
    ObjectCodeGenerator gen = new ObjectCodeGenerator(codeDir, pkg, resDir, project.getStage());
    gen.generate();
    
    OrderedCollection<ScratchSpriteMorph> sprites = project.getStage().sprites();
    
    for (int i = 0; i < sprites.size(); i++) {
      ScratchSpriteMorph sprite = sprites.get(i);
      objClz = ObjectCodeGenerator.scratchNameToIdentifier(sprite.objName().toString(), true);
      objVar = ObjectCodeGenerator.scratchNameToIdentifier(sprite.objName().toString(), false);
      
      objectsSb.append("  public static ").append(objClz).append(" ").append(objVar).append(";\n");

      createSb.append("    sprites[").append(i).append("] = ").append(objVar).append(" = new ").
               append(objClz).append("(").append(stageVar).append(");\n");
      
      gen = new ObjectCodeGenerator(codeDir, pkg, resDir, sprite);      
      gen.generate();
    }
    
    objectsSb.append("\n  public static final AbstractSprite[] sprites = new AbstractSprite[").
              append(sprites.size()).append("];\n\n");
  }
  
  void generateCreateFooter(StringBuilder createSb) {
    createSb.append("  }\n\n");
  }
  
  void generateClassFooter(StringBuilder objectsSb) {
    objectsSb.append("  private static void registerAllScripts() {\n");
    objectsSb.append("    for (AbstractSprite sprite : sprites) {\n");
    objectsSb.append("      sprite.registerScripts();\n");
    objectsSb.append("    }\n");
    objectsSb.append("  }\n");
    objectsSb.append("}\n");    
  }
}
